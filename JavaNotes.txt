		// class contains multiple variables(store values) and methods(logic)
		//we create object of class to use methods of the objects
		//abstraction, encapsulation, inheritance, polymorphism
	
		//class: logical entity, contains variables and methods, not occupy memory
		//object: physical entity, occupies memory
	//class:animal	objects: car, cow, duck, dog 
		
		//                class
		//       variables      methods    
	    //       (properties)  (behavior) 

//		class	object variable =  instance
//		Employee emp1 = new Employee();  //object creation


              METHOD		    vs.					 CONSTRUCTOR
   name can be anything                     	name same as class name
   call explicitly through object reference     will be invoked at the time of object creation
   contains  logic								contains initializations
   can return some value						not return any value
   
   
   INHERITENCE: acquiring all the properties(attributes) and behaviors(methods) 
   				from one class to another class is called inheritance. 
   				1.single:		 one parent, one child
   				2.multi-level: one parent, multiple children, each child extends the one before
   				3.hierarchical:one parent, multiple children. each child independent, extends parent individually
   				4.multiple: one child can have multiple parents!
   				5.hybrid: hier+multiple: one parent, multiple children AND one child multiple parents
   	class concept allows 1,2 and 3 types inheritances.
   	
   	INTERFACE allows to do multiple and hybrid.
   	for ex: we can not say
   	        class child1 extends Parnet1, Parent2;
   	
   	````````````````````````````````````````````
   	super keyword: used in inheritance only?
   	1. refer immediate parent class instance variable(we can also override variables)
   	2. invoke immediate parent class method 
   	
   `````````````````````````````````````````````
   final keyword: used for var, method and class.	
   1. final int =100; you can not change it later
   2. final eat(); you can not override in child class
   3. final Parent{}; you can not extend that class to another class.   				
   ``````````````````````````````````````````````````````````
   				
   INTERFACE:a blueprint of class
   			 by default has final and static variables					
   			 has abstract method(no body no logic, just definition=signature)
   			 support multiple inheritance and hybrid inheritance
   			 we use keyword 'interface' to define interface
   			 all methods are 'public' by default
   	if you know the requirement but not yet know the design, we use interface.		   				
   				
  `````````````````````````````````````````````````````````````````````````
   import packagename.classname		

````````````````````````````````````````
ACCESS MODIFIERS: 4 types of access modifiers:
 
 public : class, package, other packets directly.
 
 protected:class, package, different package with inheritance only  
 default: class, package
 private: class





   				